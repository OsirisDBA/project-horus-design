@startuml

' hide the spot
hide circle
hide empty members

' avoid problems with angled crows feet
skinparam linetype ortho



' Entities
entity "Metric" as metric {
  *MetricID : int <<generated>>
  --
  *Name : sysname
  Description : nvarchar(2000)
  *Frequency : int
  *ResultTable : sysname
  *StartDate : datetimeoffset
  *Enabled : bit
  --
  Check(Frequency > 0)
}
note top
  Contains all information needed to setup 
    and schedule the collection of a metric
end note

entity "MetricQuery" as metricquery {
  *MetricID : int <<fk>
  *QueryID : int <<fk>>
  *SQLVersion â¬… SERVERPROPERTY('ProductMajorVersion')
}
note bottom
  Many versions could share the same query.
end note

entity "Query" as query {
  *QueryID : int <<generated>>
  --
  *SelectStmt : nvarchar(max)
}
note top
  The collection query could be slightly different 
    for each version of SQL Server
end note

entity "MetricResult" as metricresult {
  *MetricID : int <<fk>>
  *SQLVersion : SQLVersion
  --
  *CreateStmt : nvarchar(max)
}
note bottom
  Usually the result table will be the same
    for each version. Future proofing this
    by allowing possibly different table definitions.
end note

entity "Schedule" as schedule {
  *MetridID : number <<FK>>
  *SchedStart : datetimeoffset
  --
  RunStart : datetimeoffset
  RunEnd : datetimeoffset
  RunDuration : int <<computed>> <<persisted>>
  *RunStatus : RunStatus 
  Message : nvarchar(max) 
  --
  PrimaryKey( SchedStart, MetricID )
  Index( MetricID )
}
note top
Every collection of a metric is a new schedule
end note

' Relationships
metric ||--o{ schedule 
metric ||--o{ metricquery 
metric ||--o{ metricresult 
query ||--o{ metricquery 

@enduml